/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.rknowsys.eapp.hrm.model.JobCategory;
import com.rknowsys.eapp.hrm.service.JobCategoryLocalService;
import com.rknowsys.eapp.hrm.service.persistence.JobCategoryPersistence;
import com.rknowsys.eapp.hrm.service.persistence.JobTitlesPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the job category local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.rknowsys.eapp.hrm.service.impl.JobCategoryLocalServiceImpl}.
 * </p>
 *
 * @author Rknowsys
 * @see com.rknowsys.eapp.hrm.service.impl.JobCategoryLocalServiceImpl
 * @see com.rknowsys.eapp.hrm.service.JobCategoryLocalServiceUtil
 * @generated
 */
public abstract class JobCategoryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements JobCategoryLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.rknowsys.eapp.hrm.service.JobCategoryLocalServiceUtil} to access the job category local service.
	 */

	/**
	 * Adds the job category to the database. Also notifies the appropriate model listeners.
	 *
	 * @param jobCategory the job category
	 * @return the job category that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public JobCategory addJobCategory(JobCategory jobCategory)
		throws SystemException {
		jobCategory.setNew(true);

		return jobCategoryPersistence.update(jobCategory);
	}

	/**
	 * Creates a new job category with the primary key. Does not add the job category to the database.
	 *
	 * @param id the primary key for the new job category
	 * @return the new job category
	 */
	@Override
	public JobCategory createJobCategory(long id) {
		return jobCategoryPersistence.create(id);
	}

	/**
	 * Deletes the job category with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the job category
	 * @return the job category that was removed
	 * @throws PortalException if a job category with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public JobCategory deleteJobCategory(long id)
		throws PortalException, SystemException {
		return jobCategoryPersistence.remove(id);
	}

	/**
	 * Deletes the job category from the database. Also notifies the appropriate model listeners.
	 *
	 * @param jobCategory the job category
	 * @return the job category that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public JobCategory deleteJobCategory(JobCategory jobCategory)
		throws SystemException {
		return jobCategoryPersistence.remove(jobCategory);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(JobCategory.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return jobCategoryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rknowsys.eapp.hrm.model.impl.JobCategoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return jobCategoryPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rknowsys.eapp.hrm.model.impl.JobCategoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return jobCategoryPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return jobCategoryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return jobCategoryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public JobCategory fetchJobCategory(long id) throws SystemException {
		return jobCategoryPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the job category with the primary key.
	 *
	 * @param id the primary key of the job category
	 * @return the job category
	 * @throws PortalException if a job category with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public JobCategory getJobCategory(long id)
		throws PortalException, SystemException {
		return jobCategoryPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return jobCategoryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the job categories.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rknowsys.eapp.hrm.model.impl.JobCategoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of job categories
	 * @param end the upper bound of the range of job categories (not inclusive)
	 * @return the range of job categories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<JobCategory> getJobCategories(int start, int end)
		throws SystemException {
		return jobCategoryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of job categories.
	 *
	 * @return the number of job categories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getJobCategoriesCount() throws SystemException {
		return jobCategoryPersistence.countAll();
	}

	/**
	 * Updates the job category in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param jobCategory the job category
	 * @return the job category that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public JobCategory updateJobCategory(JobCategory jobCategory)
		throws SystemException {
		return jobCategoryPersistence.update(jobCategory);
	}

	/**
	 * Returns the job category local service.
	 *
	 * @return the job category local service
	 */
	public com.rknowsys.eapp.hrm.service.JobCategoryLocalService getJobCategoryLocalService() {
		return jobCategoryLocalService;
	}

	/**
	 * Sets the job category local service.
	 *
	 * @param jobCategoryLocalService the job category local service
	 */
	public void setJobCategoryLocalService(
		com.rknowsys.eapp.hrm.service.JobCategoryLocalService jobCategoryLocalService) {
		this.jobCategoryLocalService = jobCategoryLocalService;
	}

	/**
	 * Returns the job category remote service.
	 *
	 * @return the job category remote service
	 */
	public com.rknowsys.eapp.hrm.service.JobCategoryService getJobCategoryService() {
		return jobCategoryService;
	}

	/**
	 * Sets the job category remote service.
	 *
	 * @param jobCategoryService the job category remote service
	 */
	public void setJobCategoryService(
		com.rknowsys.eapp.hrm.service.JobCategoryService jobCategoryService) {
		this.jobCategoryService = jobCategoryService;
	}

	/**
	 * Returns the job category persistence.
	 *
	 * @return the job category persistence
	 */
	public JobCategoryPersistence getJobCategoryPersistence() {
		return jobCategoryPersistence;
	}

	/**
	 * Sets the job category persistence.
	 *
	 * @param jobCategoryPersistence the job category persistence
	 */
	public void setJobCategoryPersistence(
		JobCategoryPersistence jobCategoryPersistence) {
		this.jobCategoryPersistence = jobCategoryPersistence;
	}

	/**
	 * Returns the job titles local service.
	 *
	 * @return the job titles local service
	 */
	public com.rknowsys.eapp.hrm.service.JobTitlesLocalService getJobTitlesLocalService() {
		return jobTitlesLocalService;
	}

	/**
	 * Sets the job titles local service.
	 *
	 * @param jobTitlesLocalService the job titles local service
	 */
	public void setJobTitlesLocalService(
		com.rknowsys.eapp.hrm.service.JobTitlesLocalService jobTitlesLocalService) {
		this.jobTitlesLocalService = jobTitlesLocalService;
	}

	/**
	 * Returns the job titles remote service.
	 *
	 * @return the job titles remote service
	 */
	public com.rknowsys.eapp.hrm.service.JobTitlesService getJobTitlesService() {
		return jobTitlesService;
	}

	/**
	 * Sets the job titles remote service.
	 *
	 * @param jobTitlesService the job titles remote service
	 */
	public void setJobTitlesService(
		com.rknowsys.eapp.hrm.service.JobTitlesService jobTitlesService) {
		this.jobTitlesService = jobTitlesService;
	}

	/**
	 * Returns the job titles persistence.
	 *
	 * @return the job titles persistence
	 */
	public JobTitlesPersistence getJobTitlesPersistence() {
		return jobTitlesPersistence;
	}

	/**
	 * Sets the job titles persistence.
	 *
	 * @param jobTitlesPersistence the job titles persistence
	 */
	public void setJobTitlesPersistence(
		JobTitlesPersistence jobTitlesPersistence) {
		this.jobTitlesPersistence = jobTitlesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.rknowsys.eapp.hrm.model.JobCategory",
			jobCategoryLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.rknowsys.eapp.hrm.model.JobCategory");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return JobCategory.class;
	}

	protected String getModelClassName() {
		return JobCategory.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = jobCategoryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.rknowsys.eapp.hrm.service.JobCategoryLocalService.class)
	protected com.rknowsys.eapp.hrm.service.JobCategoryLocalService jobCategoryLocalService;
	@BeanReference(type = com.rknowsys.eapp.hrm.service.JobCategoryService.class)
	protected com.rknowsys.eapp.hrm.service.JobCategoryService jobCategoryService;
	@BeanReference(type = JobCategoryPersistence.class)
	protected JobCategoryPersistence jobCategoryPersistence;
	@BeanReference(type = com.rknowsys.eapp.hrm.service.JobTitlesLocalService.class)
	protected com.rknowsys.eapp.hrm.service.JobTitlesLocalService jobTitlesLocalService;
	@BeanReference(type = com.rknowsys.eapp.hrm.service.JobTitlesService.class)
	protected com.rknowsys.eapp.hrm.service.JobTitlesService jobTitlesService;
	@BeanReference(type = JobTitlesPersistence.class)
	protected JobTitlesPersistence jobTitlesPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private JobCategoryLocalServiceClpInvoker _clpInvoker = new JobCategoryLocalServiceClpInvoker();
}